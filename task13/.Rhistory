Acf(fc1$res)
Acf(fc2$res)
mean(fc1$res)
Box.test(frc1$res, fitdf=0, type="Lj")
Box.test(frc2$res, fitdf=0, type="Lj")
Acf(fc1$res)
Acf(fc2$res)
Box.test(frc1$res, fitdf=0, type="Lj")
Box.test(frc2$res, fitdf=0, type="Lj")
mean(fc1$res)
mean(frc1$res)
AIC(frc1)
AIC(frc2)
?AIC
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
library()
AIC(frc1)
AIC(frc2)
frc1[2]
frc2$model[2]
Acf(fc1$res)
Acf(fc2$res)
Box.test(frc1$res, fitdf=0, type="Lj")
Box.test(frc2$res, fitdf=0, type="Lj")
accuracy(frc1)
accuracy(frc2)
frc1[2]
frc2$model[2]
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(fc2), col="red")
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
plot(duom, xlim=c(1900,2100), ylim=c(-100,400), lwd=2)
lines(frc1$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
lines(frc1$mean, col="red", lwd=2)
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(fc2), col="red")
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
accuracy(frc1)
accuracy(frc2)
frc1[2]
frc2$model[2]
plot(duom, xlim=c(1900,2100), ylim=c(-100,400), lwd=2)
lines(frc1$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc2), col="red")
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc2), col="red")
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
plot(duom, xlim=c(1900,2100), ylim=c(-100,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
plot(duom, xlim=c(1900,2100), ylim=c(-100,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("damped", "eksponentinis", "multiplikatyvus"), col=c("yellow", "green", "red"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-100,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("damped", "eksponentinis", "multiplikatyvus"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-100,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1910,2100), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1905,2100), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2050), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2090), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-20,370), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-20,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(0,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-20,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
plot(duom, xlim=c(1900,2100), ylim=c(-20,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("frc1", "frc2"), col=c("red", "green"), lwd=2, cex=1)
?eggs
?dozen
plot(duom, xlim=c(1900,2100), ylim=c(-20,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("ETS", "eksponentinis"), col=c("red", "green"), lwd=2, cex=1)
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
accuracy(frc1)
accuracy(frc2)
frc1[2]
frc2$model[2]
Acf(fc1$res)
Acf(fc2$res)
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
frc2 <- holt(duom, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
frc2 <- holt(eggs, h=100, exponential=TRUE, alpha=0.8, beta=NULL)
plot(frc2, main="Prognozė su eksponentiniu trendu")
lines(fitted(frc2), col="green")
accuracy(frc1)
accuracy(frc2)
frc1[2]
frc2$model[2]
Acf(fc1$res)
Acf(fc2$res)
Acf(frc1$res)
Acf(frc2$res)
Box.test(frc1$res, fitdf=0, type="Lj")
Box.test(frc2$res, fitdf=0, type="Lj")
plot(duom, xlim=c(1900,2100), ylim=c(-20,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("ETS", "eksponentinis"), col=c("red", "green"), lwd=2, cex=1)
plot(eggs, xlim=c(1900,2100), ylim=c(-20,400), lwd=2)
lines(forecast(frc1, h=100)$mean, col="red", lwd=2)
lines(frc2$mean, col="green", lwd=2)
legend("topright", legend=c("ETS", "eksponentinis"), col=c("red", "green"), lwd=2, cex=1)
Acf(frc1$res)
Acf(frc2$res)
library("fpp")
install.packages("expsmooth")
install.packages("expsmooth")
library("expsmooth")
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
frc1 <- ets(visitors)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
library("expsmooth")
frc1 <- ets(visitors)
frc1
k <- 48 # minimum size for training set
n <- length(visitors) # Total number of observations
e <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n-1))
{
train <- ts(visitors[1:i],freq=12)
fit <- ets(train, "MAM", damped=FALSE)
fc <- forecast(fit,h=1)$mean
e[i] <- visitors[i+1]-fc
}
sqrt(mean(e^2,na.rm=TRUE))
library("expsmooth")
frc1 <- ets(visitors)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
fit<-ets(visitors)
fit[13]
rmse1<-accuracy(fit)[2]; rmse1
rmse1<-accuracy(fit)[2]
fit[13]
frc1 <- ets(visitors); frc1[13]
rmse1<-accuracy(frc1)[2]; rmse1
frc1 <- ets(eggs)
frc1
plot(forecast(frc1, h=100))
lines(fitted(frc1), col="red")
frc1 <- ets(visitors); frc1[13]
rmse1<-accuracy(frc1)[2]; rmse1
frc1 <- ets(visitors); frc1[13]
rmse1<-accuracy(frc1)[2]; rmse1
k <- 48 # minimum size for training set
700000/50
(50-(0.0095*50))/((0.005*699950)+(50-(0.0095*50)))
(50/700000)*(1-0.005)
k <- 48 # minimum size for training set
n <- length(visitors) # Total number of observations
e <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n-1))
{
train <- ts(visitors[1:i],freq=12)
fit <- ets(train, "MAM", damped=FALSE)
fc <- forecast(fit,h=1)$mean
e[i] <- visitors[i+1]-fc
}
sqrt(mean(e^2,na.rm=TRUE))
-(700000*0.005)+(50*0.995)-(50*0.0095)
-((700000-50)*0.005)+(50*0.995)-(50*0.0095)
(50-(0.0095*50))/((0.005*699950)+(50-(0.0095*50)))
(50/700000)*0.9905
(700000)*0.005
(700000-50)*0.005
50*0.0095
k <- 48 # minimum size for training set
n <- length(visitors) # Total number of observations
((700000-50)*0.005)/49,525
((700000-50)*0.005)/49.525
49.525/((700000-50)*0.005)
k <- 48 # minimum size for training set
n <- length(visitors) # Total number of observations
e <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n-1))
{
train <- ts(visitors[1:i],freq=12)
fit <- ets(train, "MAM", damped=FALSE)
fc <- forecast(fit,h=1)$mean
e[i] <- visitors[i+1]-fc
}
sqrt(mean(e^2,na.rm=TRUE))
plot(e)
plot(e)
k <- 48 # minimum size for training set
n <- length(visitors) # Total number of observations
e <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n-1))
{
train <- ts(visitors[1:i],freq=12)
fit <- ets(train, "MAM", damped=FALSE)
fc <- forecast(fit,h=1)$mean
e[i] <- visitors[i+1]-fc
}
sqrt(mean(e^2,na.rm=TRUE))
```
* Skaičiuoja paklaidas tarp prognozės reikšmių bei turimų duomenų reikšmių. Ieško RMSE.
* Iš šio ciklo, gauname RMSE = 18.31503. Jis yra didesnis nei prieš tai gautas. Čia paklaidos yra skaičiuojamos tarp prognozės ir žinomų reikšmių.
(c) What would happen in the above loop if I had set train <- visitors[1:i]?
```{r}
k1 <- 48 # minimum size for training set
n1 <- length(visitors) # Total number of observations
e1 <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n1-1))
{
train1 <- visitors[1:i]
fit1 <- ets(train1, "MAM", damped=FALSE)
fc1 <- forecast(fit1,h=1)$mean
e1[i] <- visitors[i+1]-fc1
}
sqrt(mean(e1^2,na.rm=TRUE))
plot(e)
plot(visitors)
frc1 <- ets(visitors); frc1[13]
rmse1<-accuracy(frc1)[2]; rmse1
k <- 48 # minimum size for training set
n <- length(visitors) # Total number of observations
e <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n-1))
{
train <- ts(visitors[1:i],freq=12)
fit <- ets(train, "MAM", damped=FALSE)
fc <- forecast(fit,h=1)$mean
e[i] <- visitors[i+1]-fc
}
rmse2 <- sqrt(mean(e^2,na.rm=TRUE))
rmse2 <- sqrt(mean(e^2,na.rm=TRUE)); rmse2
for(i in 48:(n-1))
{
train1 <- visitors[1:i]
fit1 <- ets(train1, "MAM", damped=FALSE)
fc1 <- forecast(fit1,h=1)$mean
e[i] <- visitors[i+1]-fc1
}
sqrt(mean(e^2,na.rm=TRUE))
k1 <- 48 # minimum size for training set
n1 <- length(visitors) # Total number of observations
e1 <- visitors*NA # Vector to record one-step forecast errors
for(i in 48:(n1-1))
{
train1 <- visitors[1:i]
fit1 <- ets(train1, "MAM", damped=FALSE)
fc1 <- forecast(fit1,h=1)$mean
e1[i] <- visitors[i+1]-fc1
}
sqrt(mean(e1^2,na.rm=TRUE))
plot(e)
plot(visitors)
for(i in 48:(n-1))
{
train <- ts(visitors[1:i],freq=12)
fit <- ets(train)
fc <- forecast(fit,h=1)$mean
e[i] <- visitors[i+1]-fc
}
rmse3 <- sqrt(mean(e^2,na.rm=TRUE)); rmse3
rmse1
rmse2
rmse3
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec) # Transformacijos lambda
n1 <- ndiffs(usnetelec) # Diferenciavimo eilė
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "green")
library("fpp")
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "green")
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "red")
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "red")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = n1))
plot(diff(BoxCox(usnetelec, lambda = l1), diff = 2), col = "red")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = 2))
plot(usgdp) # Turimų duomenų grafikas
l2 <- BoxCox.lambda(usgdp); l2 # Transformacijos lambda
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
plot(diff(BoxCox(usgdp, lambda = l2), diff = n2), col = "red")
kpss.test(diff(BoxCox(usgdp, lambda = l2), diff = n2))
plot(mcopper) # Turimų duomenų grafikas
l3 <- BoxCox.lambda(mcopper); l3 # Transformacijos lambda
n3 <- ndiffs(mcopper); n3 # Diferenciavimo eilė
plot(diff(BoxCox(mcopper, lambda = l3), diff = n3), col = "red")
kpss.test(diff(BoxCox(mcopper, lambda = l3), diff = n3))
plot(usgdp) # Turimų duomenų grafikas
l2 <- BoxCox.lambda(usgdp); l2 # Transformacijos lambda
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
plot(diff(BoxCox(usgdp, lambda = l2), diff = n2), col = "red")
kpss.test(diff(BoxCox(usgdp, lambda = l2), diff = n2))
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "red")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = n1))
plot(diff(BoxCox(usnetelec, lambda = l1), diff = 2), col = "red")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = 2))
plot(diff(BoxCox(usnetelec, lambda = l1), diff = 2), col = "red")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = 2))
plot(usgdp) # Turimų duomenų grafikas
l2 <- BoxCox.lambda(usgdp); l2 # Transformacijos lambda
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
plot(diff(BoxCox(usgdp, lambda = l2), diff = n2), col = "red")
kpss.test(diff(BoxCox(usgdp, lambda = l2), diff = n2))
plot(usgdp) # Turimų duomenų grafikas
plot(usnetelec) # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "red")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = n1))
plot(usgdp) # Turimų duomenų grafikas
l2 <- BoxCox.lambda(usgdp); l2 # Transformacijos lambda
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
plot(diff(BoxCox(usgdp, lambda = l2), diff = n2), col = "red")
kpss.test(diff(BoxCox(usgdp, lambda = l2), diff = n2))
acf(usgdp)
Acf(usgdp)
Acf(usgdp)
plot(usgdp) # Turimų duomenų grafikas
plot(usgdp) # Turimų duomenų grafikas
l2 <- BoxCox.lambda(usgdp); l2 # Transformacijos lambda
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
plot(diff(BoxCox(usgdp, lambda = l2), diff = n2), col = "red")
kpss.test(diff(BoxCox(usgdp, lambda = l2), diff = n2))
plot(mcopper) # Turimų duomenų grafikas
l3 <- BoxCox.lambda(mcopper); l3 # Transformacijos lambda
n3 <- ndiffs(mcopper); n3 # Diferenciavimo eilė
Acf(mcopper)
plot(mcopper) # Turimų duomenų grafikas
?mcopper
plot(mcopper) # Turimų duomenų grafikas
l3 <- BoxCox.lambda(mcopper); l3 # Transformacijos lambda
n3 <- ndiffs(mcopper); n3 # Diferenciavimo eilė
plot(diff(BoxCox(mcopper, lambda = l3), diff = n3), col = "red")
kpss.test(diff(BoxCox(mcopper, lambda = l3), diff = n3))
plot(enplanements) # Turimų duomenų grafikas
l4 <- BoxCox.lambda(enplanements); l4 # Transformacijos lambda
n4 <- ndiffs(enplanements); n4 # Diferenciavimo eilė
plot(diff(BoxCox(enplanements, lambda = l4), diff = n4), col = "red")
kpss.test(diff(BoxCox(enplanements, lambda = l4), diff = n4))
plot(enplanements) # Turimų duomenų grafikas
l4 <- BoxCox.lambda(enplanements); l4 # Transformacijos lambda
n4 <- ndiffs(enplanements); n4 # Diferenciavimo eilė
plot(diff(BoxCox(enplanements, lambda = l4), diff = n4), col = "red")
kpss.test(diff(BoxCox(enplanements, lambda = l4), diff = n4))
plot(visitors) # Turimų duomenų grafikas
l5 <- BoxCox.lambda(visitors); l5 # Transformacijos lambda
n5 <- ndiffs(visitors); n5 # Diferenciavimo eilė
plot(diff(BoxCox(visitors, lambda = l5), diff = n5), col = "red")
kpss.test(diff(BoxCox(visitors, lambda = l5), diff = n5))
plot(usgdp) # Turimų duomenų grafikas
l2 <- BoxCox.lambda(usgdp); l2 # Transformacijos lambda
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
plot(diff(BoxCox(usgdp, lambda = l2), diff = n2), col = "red")
kpss.test(diff(BoxCox(usgdp, lambda = l2), diff = n2))
plot(usnetelec, head = "pradiniai") # Turimų duomenų grafikas
l1 <- BoxCox.lambda(usnetelec); l1 # Transformacijos lambda
n1 <- ndiffs(usnetelec); n1 # Diferenciavimo eilė
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "blue")
kpss.test(diff(BoxCox(usnetelec, lambda = l1), diff = n1))
plot(usnetelec, header = "pradiniai") # Turimų duomenų grafikas
?plot
plot(usnetelec, main = "Pradiniai duomenys") # Turimų duomenų grafikas
plot(diff(BoxCox(usnetelec, lambda = l1), diff = n1), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
plot(cangas, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l6 <- BoxCox.lambda(cangas); l6 # Transformacijos lambda
plot(BoxCox(cangas, lambda = l6), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
plot(visitors, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l5 <- BoxCox.lambda(visitors); l5 # Transformacijos lambda
n5 <- ndiffs(visitors); n5 # Diferenciavimo eilė
plot(diff(BoxCox(visitors, lambda = l5), diff = n5), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
kpss.test(diff(BoxCox(visitors, lambda = l5), diff = n5))
plot(visitors, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l5 <- BoxCox.lambda(visitors); l5 # Transformacijos lambda
n5 <- ndiffs(visitors); n5 # Diferenciavimo eilė
plot(diff(BoxCox(visitors, lambda = l5), diff = n5), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
kpss.test(diff(BoxCox(visitors, lambda = l5), diff = n5))
n1 <- nsdiffs(usnetelec); n1 # Diferenciavimo eilė
n2 <- nsdiffs(usgdp); n2 # Diferenciavimo eilė
n2 <- ndiffs(usgdp); n2 # Diferenciavimo eilė
n3 <- nsdiffs(mcopper); n3 # Diferenciavimo eilė
plot(mcopper, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l3 <- BoxCox.lambda(mcopper); l3 # Transformacijos lambda
n3 <- ndiffs(mcopper); n3 # Diferenciavimo eilė
plot(diff(BoxCox(mcopper, lambda = l3), diff = n3), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
kpss.test(diff(BoxCox(mcopper, lambda = l3), diff = n3))
n4 <- nsdiffs(enplanements); n4 # Diferenciavimo eilė
n4 <- ndiffs(enplanements); n4 # Diferenciavimo eilė
n5 <- nsdiffs(visitors); n5 # Diferenciavimo eilė
n5 <- ndiffs(visitors); n5 # Diferenciavimo eilė
setwd("~/Econometrics/task13")
duom <- read.csv2("retail.csv", header = TRUE)
View(duom)
View(duom)
duom <- read.csv("retail.csv", header = TRUE)
View(duom)
duom <- read.csv2("retail.csv", header = TRUE)
View(duom)
duom <- duomenys[,9]
duomenys <- read.csv2("retail.csv", header = TRUE)
duom <- duomenys[,9]
View(duomenys)
duomvisi <- read.csv2("retail.csv", header = TRUE)
duom9 <- duomvisi[,9]
duom <- ts(duom9, frequency=12, start=c(1982,4))
plot(duom, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l7 <- BoxCox.lambda(duom); l7 # Transformacijos lambda
n7 <- ndiffs(duom); n7 # Diferenciavimo eilė
plot(diff(BoxCox(duom, lambda = l7), diff = n7), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
kpss.test(diff(BoxCox(duom, lambda = l7), diff = n7))
l7 <- BoxCox.lambda(duom); l7 # Transformacijos lambda
n7 <- ndiffs(duom); n7 # Diferenciavimo eilė
plot(diff(BoxCox(duom, lambda = l7), diff = n7), col = "blue", main = "Duomenys po transformacijos bei diferencijuoti")
kpss.test(diff(BoxCox(duom, lambda = l7), diff = n7))
<br>
