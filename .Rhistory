mod3 <- holt(eggs, h=100, exponential=TRUE, beta=0.001)
plot(mod3)
accuracy(mod1)
accuracy(mod2)
accuracy(mod3)
austourists
eggs
library(fpp)
f1 <- ets(visitors)
f1[13]
accuracy(f1)
library(fpp)
plot(visitors)
mod1<-ets(visitors)
plot(mod1)
summary(mod1)
RMSE1<-15.847
RMSE1
summary(mod1)
RMSE1<-15.847
RMSE1
summary(mod1)
RMSE1<-15.847
RMSE1
summary(mod1)
RMSE1<-15.847
RMSE1
plot(e)
lemda1<-BoxCox.lambda(usnetelec) #transformacijos lambda
n1<-ndiffs(usnetelec) # diferenciavimo eilė
plot(usnetelec) # originalūs duomenys.
n1
library(fpp)
a<-usnetelec
plot(a)
## duomenys tikrai nestacionarūs, turi didėjantį trendą.
lambda1<-BoxCox.lambda(a) ## randame tinkamą lambda
a1<-BoxCox(a,lambda1) ## atliekame transformaciją
plot(a1)
## Esminių pokyčių BoxCox nepadrė, duomenys ir taip buvo
## regulairūs.Duomenys tikrai nesezonianiai, tai naudosime ndiffs
ns1<-ndiffs(a1) ## surandame diferencijavimo eilę
a2 <- diff(a1, differences=ns1) ## diferencijuojam duomenis
plot(a2)
## duomenys panašūs į stacionarius, nes nėra trendo, duomenys horizontalūs
## patikrinam su testu, kur H0: duomenys stacionarūs ir nesezoniniai
kpss.test(a2)
## p-value>0.05 H0 priimame, duomenys stacionarūs ir nesezoniniai
library(fpp)
a<-usnetelec
plot(a)
## duomenys tikrai nestacionarūs, turi didėjantį trendą.
lambda1<-BoxCox.lambda(a) ## randame tinkamą lambda
a1<-BoxCox(a,lambda1) ## atliekame transformaciją
plot(a1)
## Esminių pokyčių BoxCox nepadrė, duomenys ir taip buvo
## regulairūs.Duomenys tikrai nesezonianiai, tai naudosime ndiffs
ns1<-ndiffs(a1) ## surandame diferencijavimo eilę
a2 <- diff(a1, differences=ns1) ## diferencijuojam duomenis
plot(a2)
## duomenys panašūs į stacionarius, nes nėra trendo, duomenys horizontalūs
## patikrinam su testu, kur H0: duomenys stacionarūs ir nesezoniniai
kpss.test(a2)
## p-value>0.05 H0 priimame, duomenys stacionarūs ir nesezoniniai
```
(b) usgdp
```{r}
b<-usgdp
plot(b)
## duomenys tikrai nestacionarūs, turi didėjantį trendą.
lambda2<-BoxCox.lambda(b) ## randame tinkamą lambda
b1<-BoxCox(b,lambda2) ## atliekame transformaciją
plot(b1)
## Esminių pokyčių BoxCox nepadrė, duomenys ir taip buvo reguliarūs.
## Duomenys tikrai nesezoniai todėl naudosime ndiffs
ns2<-ndiffs(b1) ## surandame diferencijavimo eilę
b2 <- diff(b1, differences=ns2) ## diferencijuojam duomenis
plot(b2)
## duomenys panašūs į stacionarius, nes nėra trendo, duomenys horizontalūs
## patikrinam su testu, kur H0: duomenys stacionarūs ir nesezoniniai
kpss.test(b2)
## p-value>0.05 H0 priimame, duomenys stacionarūs ir nesezoniniai
```
(c) mcopper
```{r}
d<-mcopper
plot(d)
## duomenys tikrai nestacionarūs, turi didėjantį trendą.
lambda3<-BoxCox.lambda(d) ## randame tinkamą lambda
d1<-BoxCox(d,lambda3) ## atliekame transformaciją
plot(d1)
## Išryškėjo didėjantis terndas, duomenys reguliaresni
acf(d1, lag.max = 50)
## duomenys nesezoniniai, todėl naudosime ndiffs
ns3<-ndiffs(d1) ## surandame diferencijavimo eilę
d2 <- diff(d1, differences=ns3) ## diferencijuojam duomenis
plot(d2)
## duomenys panašūs į stacionarius, nes nėra trendo, duomenys horizontalūs
## patikrinam su testu, kur H0: duomenys stacionarūs ir nesezoniniai
kpss.test(d2)
## p-value>0.05 H0 priimame, duomenys stacionarūs ir nesezoniniai
```
(d) enplanements
```{r}
e<-enplanements
plot(e)
## duomenys tikrai nestacionarūs, turi didėjantį trendą, panašūs į sezoninius
lambda4<-BoxCox.lambda(e) ## randame tinkamą lambda
e1<-BoxCox(e,lambda4) ## atliekame transformaciją
plot(e1)
## Duomenys reguliaresni (suvienodėjo svyravimai pradžioje ir pabaigoje)
acf(e1, lag.max = 50)
## duomenys sezoniniai, todėl naudosime nsdiffs
ns4<-nsdiffs(e1) ## surandame diferencijavimo eilę
e2 <- diff(e1, differences=ns4) ## diferencijuojam duomenis
plot(e2)
## duomenys panašūs į stacionarius, nes nėra trendo, duomenys horizontalūs
## patikrinam su testu, kur H0: duomenys stacionarūs ir nesezoniniai
kpss.test(e2)
## p-value>0.05 H0 priimame, duomenys stacionarūs ir nesezoniniai
```
(e) visitors
```{r}
f<-visitors
plot(f)
## duomenys tikrai nestacionarūs, turi didėjantį trendą, panašūs į sezoninius
lambda5<-BoxCox.lambda(f) ## randame tinkamą lambda
f1<-BoxCox(f,lambda5) ## atliekame transformaciją
plot(f1)
## Duomenys reguliaresni (suvienodėjo svyravimai pradžioje ir pabaigoje)
acf(f1, lag.max = 50)
## duomenys sezoniniai, todėl naudosime nsdiffs
ns5<-nsdiffs(f1) ## surandame diferencijavimo eilę
lambda1<-BoxCox.lambda(usnetelec)
par(mfcol=c(2,1))
plot(usnetelec, main="Originalūs usnetelec duomenys")
plot(BoxCox(usnetelec, lambda=lambda1), main="BoxCox transformuoti usnetelec duomenys")
Andiffs <- ndiffs(usnetelec) #įrašomas reikalingas skirtumų skaičius
Astadata<-diff(usnetelec,lag=frequency(usnetelec), differences=Andiffs) #išsaugomi A dalies stationarūs duomenys
plot(Astadata)
kpss.test(Astadata)
lambda2<-BoxCox.lambda(usgdp)
par(mfcol=c(2,1))
plot(usgdp, main="Originalūs usgdp duomenys")
plot(BoxCox(usgdp, lambda=lambda2), main="BoxCox transformuoti usgdp duomenys")
library(fpp)
library(knitr)
a <- wmurders
plot(a)
## Duomenys neturi vieno trendo ar sezoniškumo
lambda1<-BoxCox.lambda(a) ## randame tinkamą lambda
a1<-BoxCox(a,lambda1) ## atliekame transformaciją
plot(a1)
kpss.test(wmurders)
d<-arima(a, order=c(2,2,3))
e<-arima(a, order=c(1,2,3))  ## eksperimentuojam su order
f<-arima(a, order=c(2,2,1))
kpss.test(d)
kpss.test(d$res)
kpss.test(e$res)
kpss.test(f$res)
kpss.test(d1$res)
aa <- usgdp
plot(aa)
## duomenys turi didėjantį trendą
lambda2<-BoxCox.lambda(aa) ## randame tinkamą lambda
aa1<-BoxCox(aa,lambda2) ## atliekame transformaciją
plot(aa1)
d1<-arima(aa, order=c(1,2,1))
e1<-arima(aa, order=c(3,2,1))  ## eksperimentuojam su order
f1<-arima(aa, order=c(2,3,2))
kpss.test(d1$res)
kpss.test(e1$res)
kpss.test(f1$res)
aaa <- mcopper
plot(aaa)
## duomenys turi didėjantį trendą
lambda3<-BoxCox.lambda(aaa) ## randame tinkamą lambda
aaa1<-BoxCox(aaa,lambda3) ## atliekame transformaciją
plot(aaa1)
## Išryškėjo didėjantis terndas, duomenys reguliaresni
d2<-arima(aaa1, order=c(3,3,1))
e2<-arima(aaa1, order=c(2,3,1))  ## eksperimentuojam su order
f2<-arima(aaa1, order=c(1,2,1))
kpss.test(d2$res)
kpss.test(e2$res)
kpss.test(f2$res)
plot(wmurders, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l <- BoxCox.lambda(wmurders); l # Transformacijos lambda
plot(BoxCox(wmurders, lambda = l), col = "blue", main = "Duomenys po transformacijos")
arm1 <- auto.arima(wmurders); arm1
arm2 <- arima(wmurders, order = c(5,2,0))
arm3 <- arima(wmurders, order = c(1,2,3))
arm4 <- arima(wmurders, order = c(0,2,1))
kpss.test(arm1$res)
kpss.test(arm2$res)
kpss.test(arm3$res)
kpss.test(arm4$res)
plot(usgdp, main = "Pradiniai duomenys") # Turimų duomenų grafikas
la <- BoxCox.lambda(usgdp); la # Transformacijos lambda
plot(BoxCox(usgdp, lambda = la), col = "blue", main = "Duomenys po transformacijos")
arim1 <- auto.arima(usgdp); arim1
arim2 <- arima(usgdp, order = c(1,2,3))
arim3 <- arima(usgdp, order = c(0,2,7))
arim4 <- arima(usgdp, order = c(5,1,0))
kpss.test(arim1$res)
kpss.test(arim2$res)
kpss.test(arim3$res)
kpss.test(arim4$res)
plot(mcopper, main = "Pradiniai duomenys") # Turimų duomenų grafikas
l <- BoxCox.lambda(mcopper); l # Transformacijos lambda
duom <- BoxCox(mcopper, lambda = l)
plot(duom, col = "blue", main = "Duomenys po transformacijos")
ar1 <- auto.arima(duom)
ar2 <- arima(duom, order = c(1,2,3))
ar3 <- arima(duom, order = c(0,2,10))
ar4 <- arima(duom, order = c(3,1,0))
kpss.test(ar1$res)
kpss.test(ar2$res)
kpss.test(ar3$res)
kpss.test(ar4$res)
plot(wmurders)
arima1 <- auto.arima(wmurders)
arima1
arima11 <- Arima(wmurders, order = c(2,0,0), include.constant=FALSE)
arima12 <- Arima(wmurders, order = c(2,0,0), include.constant=TRUE)
arima13 <- Arima(wmurders, order = c(2,1,2), include.constant=FALSE)
arima14 <- Arima(wmurders, order = c(0,1,2), include.constant=FALSE)
kpss.test(arima11$res)
kpss.test(arima12$res)
kpss.test(arima13$res)
kpss.test(arima14$res)
kpss.test(arima11$res)
kpss.test(arima12$res)
kpss.test(arima13$res)
plot(usgdp)
arima2 <- auto.arima(usgdp)
arima2
n <- ndiffs(usgdp)
n
plot( diff(usgdp,differences=n) )
kpss.test(diff(usgdp,differences=n))
Acf(diff(usgdp,differences=n))
Pacf(diff(usgdp,differences=n))
arima21 <- Arima(usgdp, order = c(0,2,12), include.constant=FALSE)
arima22 <- Arima(usgdp, order = c(14,2,0))
kpss.test(arima21$res)
kpss.test(arima22$res)
plot(usgdp)
plot(mcopper)
dat <- mcopper
plot(mcopper)
lambda1 <- BoxCox.lambda(mcopper)
plot ( BoxCox (mcopper, lambda=lambda1))
dat <- BoxCox (mcopper, lambda=lambda1)
arima3 <- auto.arima(dat)
arima3
nn <- ndiffs(dat)
nn
plot( diff(dat,differences=nn) )
kpss.test(diff(dat,differences=nn))
Acf(diff(dat,differences=nn))
Pacf(diff(dat,differences=nn))
arima31 <- Arima(dat, order = c(0,1,19), include.constant=FALSE)
arima32 <- Arima(dat, order = c(17,1,0))
kpss.test(arima31$res)
kpss.test(arima32$res)
duom<-diff(condmilk, lag=12)
plot(duom)
acf(duom)
duom1<-diff(duom,diff=2)
plot(duom1)
Acf(duom1)
kpss.test(duom1)  # p-vaule > 0.05 H0 neatmetame. Duomenys stacionarūs.
tsdisplay(condmilk)
fit1<-arima(condmilk, order = c(1,0,0),seasonal = list(order=c(2,0,0),period=12))
fit2<-arima(condmilk, order = c(1,0,0),seasonal = list(order=c(1,0,0),period=12))
fit3<-arima(condmilk, order = c(1,0,0),seasonal = list(order=c(2,1,0),period=12))
kpss.test(fit1$res)
kpss.test(fit2$res)
kpss.test(fit3$res)
kpss.test(arima14$res)
plot(condmilk)
Acf(condmilk)
dat <- diff(condmilk, lag=12)
acf(dat)
dat2 <- diff(dat, diff=1)
plot(dat2)
acf(dat2)
kpss.test(dat2)
mod1 <- auto.arima(dat2)
mod1
l <- BoxCox.lambda(uselec); l # Transformacijos lambda
duom <- BoxCox(uselec, lambda = l)
plot(duom, col = "blue", main = "Duomenys po transformacijos")
hist(duom, main = "Transformuotų duomenų histograma")
kpss.test(duom) # H0: duomenys yra stacionarūs
n <- nsdiffs(duom); n
duom2 <- diff(duom, diff = n)
plot(duom2, main = "Diferencijuotų duomenų grafikas")
kpss.test(duom2) # H0: duomenys yra stacionarūs
fit1 <- auto.arima(duom); fit1 # Gavome ARIMA(3,0,2)(2,1,0)[12] with drift
fit2 <- arima(duom, order=c(1,0,2), seasonal=c(2,1,0))
fit3 <- arima(duom, order=c(0,2,9), seasonal=c(0,0,6))
klaidos <- matrix(c(33,19,18,42,28,41,44,35,7,23,39,22,18,9,38,42,32,22,7,6,5), byrow=TRUE, ncol=3)
colnames(klaidos) <- c("A", "B", "O")
vairuotojas <- letters[1:7]
klaidos <- data.frame(vairuotojas, klaidos)
l <- reshape(klaidos, varying = c("A", "B", "O"),
v.names = "klaidos", timevar = "vairuotojas",
times = c("A", "B", "O"), new.row.names = 1:21, direction = "long")
dat <- data.frame(rep(vairuotojas,3), l)
colnames(dat) <- c("vairuotojas", "modelis", "klaidos")
View(l)
View(klaidos)
View(dat)
mod <- aov(klaidos~modelis+Error(vairuotojas/modelis), data=dat); summary(mod)
33+19+18
33+42+44+23+18+42+7
19+28+35+39+9+32+6
18+41+7+22+38+22+5
209+168+153
a <- c(27,31,28,24,16,19,28,31,20,27,27,21)
b <- a^2
c <- sum(b)
d <- c/4
e <- 299^2
f <- 4*2*4
g <- e/f
e <- 299^2
f <- 4*2*6
g <- e/f
c-g
d-g
dd <- c(9,7,6,5,
8,3,10,10,
7,6,5,10,
5,6,9,4,
3,7,3,3,
8,4,4,3,
6,7,9,6,
6,10,9,6,
10,3,3,4,
7,8,7,5,
10,10,4,3,
4,3,10,4)
sum(dd)
ddd <- dd^2
sum(ddd)
2155-1862,52
2155-1862.52
2155-1862.52-65.23
duomvisi <- read.csv2("data_m.csv", header = TRUE)
setwd("~/Econometrics/Egzaminas 2016-06-15")
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomvisi <- read.csv2("data_m.xls", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomvisi <- read.csv2("ceo.xls", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_b.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_b.csv", header = TRUE)
setwd("~/Econometrics")
duomvisi <- read.csv2("data_m", header = TRUE)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomvisi <- read.csv2("data_b.csv", header = TRUE)
setwd("~/Econometrics/Egzaminas 2016-06-15")
duomvisi <- read.csv2("data_b.csv", header = TRUE)
View(duomvisi)
setwd("~/Econometrics")
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
View(duomvisi)
View(duomvisi)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomenys <- duomvisi[1:(dim(duomvisi)[1]-)8,] # istrinamos paskutines 8 eilutes su tekstu
duomenys <- duomvisi[1:(dim(duomvisi)[1]-8,] # istrinamos paskutines 8 eilutes su tekstu
duomenys <- duomvisi[1:(dim(duomvisi)[1]-8),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
str(duomenys2)
duomenys2[,2] <- as.numeric(paste(duomenys2[,2]))
duomenys2[,3] <- as.numeric(paste(duomenys2[,3]))
duomenys2[,5] <- as.numeric(paste(duomenys2[,5]))
duomenys2[,4] <- as.numeric(paste(duomenys2[,4]))
View(duomenys2)
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
duomenys2[,2] <- as.numeric(paste(duomenys2[,2]))
duomenys2[,3] <- as.numeric(paste(duomenys2[,3]))
duomenys2[,4] <- as.numeric(paste(duomenys2[,4]))
duomenys2[,5] <- as.numeric(paste(duomenys2[,5]))
str(duomenys2)
duomenys3 <- na.omit(duomenys2) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
mod1 <- lm(islaidosVaisiams~butinosIslaidos+pajamos+atstumasIkiParduotuves, data = duomenys2)
View(duomenys3)
mod1 <- lm(salary~totcomp+tenure+age+sales+profits+assets, data = duomenys3)
plot(mod1)
plot(duomenys3)
mod1 <- lm(salary~totcomp+tenure+age+sales+profits+assets, data = duomenys2)
plot(mod1)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomenys <- duomvisi[1:(dim(duomvisi)[1]-8),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
duomenys2[,2] <- as.numeric(paste(duomenys2[,2]))
duomenys2[,6] <- as.numeric(paste(duomenys2[,6]))
duomenys2[,7] <- as.numeric(paste(duomenys2[,7]))
duomenys2[,5] <- as.numeric(paste(duomenys2[,5]))
str(duomenys2)
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
duomenys2[,2] <- as.numeric(paste(duomenys2[,2]))
str(duomenys2)
mod1 <- lm(salary~totcomp+tenure+age+sales+profits+assets, data = duomenys2)
plot(mod1)
View(duomenys2)
summary(mod1)
duomvisi <- read.csv2("data_m.csv", header = TRUE)
duomenys <- duomvisi[1:(dim(duomvisi)[1]-8),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
mod1 <- lm(salary~totcomp+tenure+age+sales+profits+assets, data = duomenys2)
str(duomenys2)
duomenys2[,7] <- as.numeric(paste(duomenys2[,7]))
mod1 <- lm(salary~totcomp+tenure+age+sales+profits+assets, data = duomenys2)
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
mod1 <- lm(salary~totcomp+tenure+age+sales+profits+assets, data = duomenys2)
summary(mod1)
duomvisi <- read.csv2("life.csv", header = TRUE)
View(duomvisi)
duomvisi <- read.csv2("life.csv", header = TRUE)
View(duomvisi)
duomenys <- duomvisi[-8),] # istrinamos paskutines 8 eilutes su tekstu
duomenys <- duomvisi[-8,] # istrinamos paskutines 8 eilutes su tekstu
View(duomenys)
duomvisi <- read.csv2("life.csv", header = TRUE)
View(duomvisi)
duomenys <- duomvisi[-4,] # istrinamos paskutines 8 eilutes su tekstu
View(duomenys)
View(duomenys)
duomenys <- duomvisi[-4,] # istrinamos paskutines 8 eilutes su tekstu
duomvisi <- duomvisi[-4,] # istrinamos paskutines 8 eilutes su tekstu
duomvisi <- duomvisi[-8,] # istrinamos paskutines 8 eilutes su tekstu
View(duomvisi)
duomvisi <- duomvisi[-9,] # istrinamos paskutines 8 eilutes su tekstu
View(duomvisi)
duomvisi <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
View(duomvisi)
duomvisi <- read.csv2("life.csv", header = TRUE)
duomvisi <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
duomenys <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
duomvisi <- read.csv2("life.csv", header = TRUE)
duomenys <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
View(duomvisi)
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
duomenys2[,4] <- as.numeric(paste(duomenys2[,4]))
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
duomvisi <- read.csv2("life.csv", header = TRUE)
duomenys <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
duomvisi <- read.csv2("life.csv", header = TRUE)
duomenys <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,3] <- as.numeric(paste(duomenys2[,3]))
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
duomenys2[,4] <- as.numeric(paste(duomenys2[,4]))
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
duomenys2[,2] <- as.numeric(paste(duomenys2[,2]))
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
duomvisi <- read.csv2("life.csv", header = TRUE)
duomenys <- duomvisi[c(-1,-2,-3,-4),] # istrinamos paskutines 8 eilutes su tekstu
duomenys[duomenys=="ner"] <- NA # ner reiksmes pazymimos kaip naturimos - NA
duomenys2 <- na.omit(duomenys) # istrinamos 5 eilutes, kuriose yra NA reiksmiu
str(duomenys2) #perziurimas duomenu tipas ir keiciamas is factor i numeric isskyrus rajonoID
duomenys2[,1] <- as.numeric(paste(duomenys2[,1]))
mod1 <- lm(LifeEx~TV+PopDoc+GDP, data = duomenys2)
summary(mod1)
